security:
    enable_authenticator_manager: true
    password_hashers:
        App\Entity\Vendor\VendorsSecurity:
            algorithm: auto
    providers:
        chain_provider:
            chain:
                providers: [in_memory, database_users]
        in_memory:
            memory:
                users:
                    admin:
                        password: kitten
                        roles: 'ROLE_ADMIN'
        database_users:
            entity:
                class: App\Entity\Vendor\VendorsSecurity
                property: '%app_property%'
    role_hierarchy:
        ROLE_USER: [ROLE_ALLOWED_TO_SWITCH]
        ROLE_ADMIN: [ROLE_USER]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN]
    firewalls:
        wsse:
            pattern:   ^/wsse/
            stateless: true
            wsse:      { lifetime: 30 }
        api:
            pattern: ^/api*
            provider: database_users
            anonymous: ~
            logout: ~
            guard:
                authenticators:
                - App\Security\TokenAuthenticator
        admin:
            pattern: ^/admin
            provider: in_memory
            anonymous: ~
            security: false # отключает контент безопасности
            guard:
                authenticators:
                    - App\Security\LoginBackAuthenticator
            #remember_me: ~
            #secret: '%kernel.secret%'
            #lifetime: 604800 # 1 week in seconds
            #path: /admin
            #name: AdminRememberCookie
            #always_remember_me: true

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            #pattern: ^/login
            switch_user: { role: ROLE_ADMIN }
            provider: database_users
            http_basic: ~
            anonymous: true
            guard:
                authenticators:
                    - App\Security\LoginAuthenticator
            #security: false # отключает контекст безопасности
            form_login:
                #check_path: login_check
                login_path: login
                csrf_token_generator: security.csrf.token_manager
                default_target_path: '%app_logged_in_target_routename%'
                use_referer: true
                target_path_parameter: redirect
                failure_path_parameter: forgot
                #failure_path: login
                username_parameter: _email
                password_parameter: _password
            logout:
                path: logout
                target: '%app_logged_out_target_routename%'
            json_login:
                check_path: jsonLogin
            # token_provider : 'Symfony\Bridge\Doctrine\Security\RememberMe\DoctrineTokenProvider'
            #
            # https://symfony.com.ua/doc/current/security/guard_authentication.html
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path: /
                name: RememberCookie
                always_remember_me: true
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, role: PUBLIC_ACCESS, requires_channel: https }
        - { path: ^/(%app_locales%)/registration, role: PUBLIC_ACCESS, requires_channel: https }
        #- { path: ^/(%app_locales%)/dashboard, role: ROLE_ADMIN, requires_channel: https }
        #- { path: ^/(%app_locales%)/admin, roles: ROLE_ADMIN, requires_channel: https }
        #- { path: ^/(%app_locales%)/profile, roles: ROLE_USER }
        - { path: ^/api, roles: ROLE_API_USER, requires_channel: https }
        # the 'path' value can be any valid regular expression
        # (this one will match URLs like /api/post/7298 and /api/comment/528491)
        #- { path: ^/api/(post|comment)/\d+$, roles: ROLE_USER }
